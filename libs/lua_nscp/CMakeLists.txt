cmake_minimum_required(VERSION 2.6)

if(LUA_FOUND OR LUA_SOURCE_FOUND)

SET(TARGET lua_nscp)

SET(SRCS
	lua_core.cpp
	lua_cpp.cpp
	lua_script.cpp
	${NSCP_INCLUDEDIR}/scripts/script_nscp.cpp
)

IF(WIN32)
	SET(SRCS ${SRCS}
		${NSCP_INCLUDEDIR}/lua/lua_core.hpp
		${NSCP_INCLUDEDIR}/lua/lua_cpp.hpp
		${NSCP_INCLUDEDIR}/lua/lua_script.hpp
		${NSCP_INCLUDEDIR}/scripts/script_interface.hpp
		${NSCP_INCLUDEDIR}/scripts/script_nscp.hpp
	)
ENDIF(WIN32)

INCLUDE_DIRECTORIES(${LUA_SOURCE_DIR})

IF (PROTOC_GEN_LUA_FOUND)
	ADD_DEFINITIONS(-DHAVE_LUA_PB)
	INCLUDE_DIRECTORIES(${NSCP_PROJECT_BINARY_DIR}/libs/lua_pb)
	INCLUDE_DIRECTORIES(${NSCP_PROJECT_BINARY_DIR}/libs/protobuf)
ENDIF()

ADD_DEFINITIONS(${NSCP_GLOBAL_DEFINES})

ADD_LIBRARY(${TARGET} STATIC ${SRCS})

IF (PROTOC_GEN_LUA_FOUND)
	target_link_libraries(${TARGET} nscp_lua_pb ${Boost_THREAD_LIBRARY})
	ADD_DEPENDENCIES(${TARGET} nscp_lua_pb)
ENDIF(PROTOC_GEN_LUA_FOUND)

SET_TARGET_PROPERTIES(${TARGET} PROPERTIES FOLDER "libraries")

IF(CMAKE_COMPILER_IS_GNUCXX)
	IF("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64" AND NOT APPLE)
		SET_TARGET_PROPERTIES(${TARGET} PROPERTIES COMPILE_FLAGS -fPIC)
	ENDIF("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64" AND NOT APPLE)
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

endif()
